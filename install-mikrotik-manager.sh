#!/bin/bash
#
# MikroTik Backup Manager - Smart Installer/Updater v2.0
# Deteguje existuj√∫cu in≈°tal√°ciu a spust√≠ buƒè in≈°tal√°ciu alebo update
#
set -e

# Funkcie pre farebn√Ω v√Ωstup
function msg_info() { echo -e "\\033[1;34mINFO\\033[0m: $1"; }
function msg_ok() { echo -e "\\033[1;32mSUCCESS\\033[0m: $1"; }
function msg_warn() { echo -e "\\033[1;33mWARNING\\033[0m: $1"; }

# Premenn√©
REPO_URL="https://github.com/spekulanter/mikrotik-manager.git"
APP_DIR="/opt/mikrotik-manager"
DATA_DIR="/var/lib/mikrotik-manager"
SERVICE_FILE="/etc/systemd/system/mikrotik-manager.service"

# Kontrola, ƒçi u≈æ existuje in≈°tal√°cia
if [ -d "${APP_DIR}/.git" ]; then
    echo "üîÑ Detegovan√° existuj√∫ca in≈°tal√°cia - sp√∫≈°≈•am aktualiz√°ciu..."
    
    # UPDATE PROCES
    msg_info "Zastavujem slu≈æbu MikroTik Backup Manager..."
    systemctl stop mikrotik-manager.service 2>/dev/null || true
    systemctl kill mikrotik-manager.service 2>/dev/null || true
    sleep 1
    msg_ok "Slu≈æba zastaven√°."
    
    msg_info "Z√°lohujem aktu√°lnu konfigur√°ciu..."
    # Z√°loha datab√°zy a konfiguraƒçn√Ωch s√∫borov
    if [ -d "${DATA_DIR}/data" ]; then
        cp -r ${DATA_DIR}/data ${DATA_DIR}/data.backup.$(date +%Y%m%d_%H%M%S) 2>/dev/null || true
    fi
    msg_ok "Konfigur√°cia z√°lohovan√°."
    
    msg_info "S≈•ahujem najnov≈°ie zmeny z ${REPO_URL}..."
    cd ${APP_DIR}
    # Jednoduch√Ω a spoƒæahliv√Ω update
    git fetch origin >/dev/null 2>&1
    git reset --hard origin/main >/dev/null 2>&1
    git clean -fd >/dev/null 2>&1
    git pull origin main >/dev/null 2>&1
    msg_ok "K√≥d aktualizovan√Ω na najnov≈°iu verziu."
    
    # Kontrola a vytvorenie Python Virtual Environment ak neexistuje
    if [ ! -d "${APP_DIR}/venv" ]; then
        msg_info "Vytv√°ram ch√Ωbaj√∫ce Python Virtual Environment..."
        python3 -m venv ${APP_DIR}/venv
        msg_ok "Virtual environment vytvoren√©."
    fi
    
    msg_info "Aktualizujem Python z√°vislosti..."
    source ${APP_DIR}/venv/bin/activate
    pip install --quiet -r ${APP_DIR}/requirements.txt >/dev/null 2>&1
    deactivate
    msg_ok "Z√°vislosti aktualizovan√©."
    
    # Kontrola a aktualiz√°cia Android development n√°strojov
    msg_info "Kontrolujem Android development n√°stroje..."
    
    # Node.js check & update
    if ! command -v node &> /dev/null || [[ "$(node -v)" != "v18."* ]]; then
        msg_info "Aktualizujem Node.js na verziu 18.x..."
        curl -fsSL https://deb.nodesource.com/setup_18.x | bash - >/dev/null 2>&1
        apt-get install -y nodejs >/dev/null 2>&1
    fi
    
    # Cordova CLI update
    if command -v npm &> /dev/null; then
        npm install -g cordova@latest >/dev/null 2>&1
    fi
    
    # Refresh environment setup files
    if [ ! -f "/etc/profile.d/android-dev.sh" ]; then
        msg_info "Obnovujem environment setup..."
        cat << 'PROFEOF' > /etc/profile.d/android-dev.sh
export ANDROID_HOME=/opt/android-sdk
export ANDROID_SDK_ROOT=/opt/android-sdk
export PATH=${PATH}:${ANDROID_HOME}/cmdline-tools/latest/bin:${ANDROID_HOME}/platform-tools:/opt/gradle/bin
export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
PROFEOF
        chmod +x /etc/profile.d/android-dev.sh
    fi
    
    msg_ok "Android development n√°stroje skontrolovan√©."
    
    # Kontrola a aktualiz√°cia Android development n√°strojov
    msg_info "Kontrolujem Android development n√°stroje..."
    
    # Node.js 18.x check
    if ! command -v node &> /dev/null || [[ "$(node -v)" != "v18."* ]]; then
        msg_info "Aktualizujem Node.js na verziu 18.x..."
        curl -fsSL https://deb.nodesource.com/setup_18.x | bash - >/dev/null 2>&1 || true
        apt-get install -y nodejs >/dev/null 2>&1 || true
    fi
    
    # Android SDK check
    if [ ! -d "/opt/android-sdk/cmdline-tools" ]; then
        msg_info "In≈°talujem ch√Ωbaj√∫ce Android SDK..."
        mkdir -p /opt/android-sdk
        cd /tmp
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip 2>/dev/null || true
        unzip -q commandlinetools-linux-11076708_latest.zip -d /opt/android-sdk/ 2>/dev/null || true
        mv /opt/android-sdk/cmdline-tools /opt/android-sdk/cmdline-tools-temp 2>/dev/null || true
        mkdir -p /opt/android-sdk/cmdline-tools/latest
        mv /opt/android-sdk/cmdline-tools-temp/* /opt/android-sdk/cmdline-tools/latest/ 2>/dev/null || true
        rmdir /opt/android-sdk/cmdline-tools-temp 2>/dev/null || true
        rm commandlinetools-linux-11076708_latest.zip 2>/dev/null || true
        cd ${APP_DIR}
    fi
    
    # Gradle check
    if [ ! -d "/opt/gradle" ]; then
        msg_info "In≈°talujem ch√Ωbaj√∫ci Gradle..."
        cd /tmp
        wget -q https://services.gradle.org/distributions/gradle-8.13-bin.zip 2>/dev/null || true
        unzip -q gradle.zip 2>/dev/null || true
        mv gradle-8.13 /opt/gradle 2>/dev/null || true
        rm -f gradle.zip 2>/dev/null || true
        cd ${APP_DIR}
    fi
    
    # Cordova CLI check  
    if ! command -v cordova &> /dev/null; then
        msg_info "In≈°talujem ch√Ωbaj√∫ci Cordova CLI..."
        npm install -g cordova >/dev/null 2>&1 || true
    fi
    
    # Environment setup check
    if [ ! -f "/etc/profile.d/android-dev.sh" ]; then
        msg_info "Aktualizujem environment setup..."
        cat << 'PROFEOF' > /etc/profile.d/android-dev.sh
export ANDROID_HOME=/opt/android-sdk
export ANDROID_SDK_ROOT=/opt/android-sdk
export PATH=${PATH}:${ANDROID_HOME}/cmdline-tools/latest/bin:${ANDROID_HOME}/platform-tools:/opt/gradle/bin
export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
PROFEOF
        chmod +x /etc/profile.d/android-dev.sh
    fi
    
    msg_ok "Android development n√°stroje skontrolovan√©."
    
    # Vytvorenie adres√°rov ak neexistuj√∫
    msg_info "Kontrolujem adres√°re..."
    mkdir -p ${DATA_DIR}/data/backups 2>/dev/null || true
    chown -R root:root ${APP_DIR} 2>/dev/null || true
    chown -R root:root ${DATA_DIR} 2>/dev/null || true
    msg_ok "Adres√°re skontrolovan√©."
    
    # Aktualiz√°cia systemd service s√∫boru (mo≈æn√© zmeny)
    msg_info "Kontrolujem systemd slu≈æbu..."
    cat << EOF > ${SERVICE_FILE}
[Unit]
Description=MikroTik Backup Manager
After=network.target

[Service]
Type=simple
User=root
Group=root
WorkingDirectory=${APP_DIR}
ExecStart=/opt/mikrotik-manager/venv/bin/gunicorn --worker-class eventlet -w 1 --bind 0.0.0.0:5000 "app:app"
Restart=always
RestartSec=10
Environment="DATA_DIR=${DATA_DIR}/data"

[Install]
WantedBy=multi-user.target
EOF
    systemctl daemon-reload 2>/dev/null || true
    msg_ok "Systemd slu≈æba skontrolovan√°."
    
    # Kontrola a vytvorenie Cordova projektu ak neexistuje (aj pri update)
    if [ ! -d "/opt/mikrotik-manager-app" ]; then
        msg_info "Vytv√°ram ch√Ωbaj√∫ci Cordova projekt pre Android APK..."
        # Naƒç√≠ta≈• Android environment
        source /etc/profile.d/android-dev.sh 2>/dev/null || true
        export ANDROID_HOME=/opt/android-sdk
        export ANDROID_SDK_ROOT=/opt/android-sdk
        export PATH=${PATH}:${ANDROID_HOME}/cmdline-tools/latest/bin:${ANDROID_HOME}/platform-tools:/opt/gradle/bin
        export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
        
        cd /opt
        cordova create mikrotik-manager-app com.mikrotik.manager "MikroTik Manager" >/dev/null 2>&1 || true
        cd mikrotik-manager-app
        cordova platform add android >/dev/null 2>&1 || true
        cordova plugin add cordova-plugin-inappbrowser >/dev/null 2>&1 || true
        
        # Kop√≠rovanie template index.html z repozit√°ra ak existuje
        if [ -f "/opt/mikrotik-manager/template/index.html" ]; then
            cp /opt/mikrotik-manager/template/index.html /opt/mikrotik-manager-app/www/ 2>/dev/null || true
        fi
        cd ${APP_DIR}
        msg_ok "Cordova projekt vytvoren√Ω."
    fi
    
    # Kop√≠rovanie APK instructions template do /opt/
    if [ -f "/opt/mikrotik-manager/template/MIKROTIK_MANAGER_APK_INSTRUCTIONS.md" ]; then
        cp /opt/mikrotik-manager/template/MIKROTIK_MANAGER_APK_INSTRUCTIONS.md /opt/ 2>/dev/null || true
    fi
    
    # Automatick√© skop√≠rovanie pre-built APK
    if [ ! -f "/opt/MikroTikManager.apk" ] && [ -f "${APP_DIR}/MikroTikManager.apk" ]; then
        msg_info "Kop√≠rujem pre-built Android APK..."
        cp ${APP_DIR}/MikroTikManager.apk /opt/MikroTikManager.apk
        rm -f ${APP_DIR}/MikroTikManager.apk
        msg_ok "APK skop√≠rovan√Ω z repozit√°ra: /opt/MikroTikManager.apk"
    elif [ -f "/opt/MikroTikManager.apk" ]; then
        msg_info "Android APK u≈æ existuje: /opt/MikroTikManager.apk"
        # Vyma≈æ APK z repozit√°ra ak existuje
        rm -f ${APP_DIR}/MikroTikManager.apk
    else
        msg_warn "APK nen√°jden√Ω. Pre vytvorenie spusti: cd /opt/mikrotik-manager && ./build-apk.sh"
    fi
    
    # Vymazanie Python cache pre zaruƒçen√© naƒç√≠tanie nov√©ho k√≥du
    msg_info "ƒåist√≠m Python cache..."
    find ${APP_DIR} -name "*.pyc" -delete 2>/dev/null || true
    find ${APP_DIR} -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
    msg_ok "Cache vymazan√°."
    
    msg_info "Sp√∫≈°≈•am slu≈æbu..."
    systemctl enable mikrotik-manager.service 2>/dev/null || true
    systemctl start mikrotik-manager.service 2>/dev/null || true
    sleep 2
    msg_ok "Slu≈æba spusten√°."
    
    echo "‚úÖ Aktualiz√°cia dokonƒçen√°!"
    echo "üåê Aplik√°cia je dostupn√° na: http://$(hostname -I | awk '{print $1}'):5000"
    
else
    echo "üÜï Sp√∫≈°≈•am ƒçerstv√∫ in≈°tal√°ciu..."
    
    # IN≈†TALAƒåN√ù PROCES
    # Aktualiz√°cia syst√©mu a in≈°tal√°cia z√°vislost√≠
    msg_info "Aktualizujem syst√©m a in≈°talujem potrebn√© bal√≠ƒçky..."
    apt-get update >/dev/null 2>&1
    apt-get install -y git python3-pip python3-venv curl wget unzip openjdk-17-jdk >/dev/null 2>&1
    msg_ok "Syst√©mov√© z√°vislosti s√∫ nain≈°talovan√©."
    
    # In≈°tal√°cia Node.js 18.x
    msg_info "In≈°talujem Node.js 18.x pre Android development..."
    if ! command -v node &> /dev/null || [[ "$(node -v)" != "v18."* ]]; then
        curl -fsSL https://deb.nodesource.com/setup_18.x | bash - >/dev/null 2>&1
        apt-get install -y nodejs >/dev/null 2>&1
    else
        msg_info "Node.js 18.x u≈æ je nain≈°talovan√©, preskakujem..."
    fi
    msg_ok "Node.js nain≈°talovan√©: $(node -v 2>/dev/null || echo 'ready')"
    
    # In≈°tal√°cia Android SDK
    msg_info "In≈°talujem Android SDK pre APK building..."
    if [ ! -d "/opt/android-sdk/cmdline-tools" ]; then
        mkdir -p /opt/android-sdk
        cd /tmp
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip
        unzip -q commandlinetools-linux-11076708_latest.zip -d /opt/android-sdk/
        mv /opt/android-sdk/cmdline-tools /opt/android-sdk/cmdline-tools-temp
        mkdir -p /opt/android-sdk/cmdline-tools/latest
        mv /opt/android-sdk/cmdline-tools-temp/* /opt/android-sdk/cmdline-tools/latest/
        rmdir /opt/android-sdk/cmdline-tools-temp
        rm commandlinetools-linux-11076708_latest.zip
        
        # Nastavenie Android SDK environment
        export ANDROID_HOME=/opt/android-sdk
        export ANDROID_SDK_ROOT=/opt/android-sdk
        export PATH=${PATH}:${ANDROID_HOME}/cmdline-tools/latest/bin:${ANDROID_HOME}/platform-tools
        
        # In≈°tal√°cia Android SDK komponentov
        yes | /opt/android-sdk/cmdline-tools/latest/bin/sdkmanager --licenses >/dev/null 2>&1
        /opt/android-sdk/cmdline-tools/latest/bin/sdkmanager "platform-tools" "platforms;android-35" "build-tools;35.0.0" "build-tools;34.0.0" >/dev/null 2>&1
    else
        msg_info "Android SDK u≈æ je nain≈°talovan√©, kontrolujem build-tools..."
        export ANDROID_HOME=/opt/android-sdk
        export ANDROID_SDK_ROOT=/opt/android-sdk
        export PATH=${PATH}:${ANDROID_HOME}/cmdline-tools/latest/bin:${ANDROID_HOME}/platform-tools
        # Doain≈°taluj ch√Ωbaj√∫ce build-tools ak potrebn√©
        if [ ! -d "/opt/android-sdk/build-tools/34.0.0" ]; then
            msg_info "In≈°talujem ch√Ωbaj√∫ce Android build-tools 34.0.0..."
            /opt/android-sdk/cmdline-tools/latest/bin/sdkmanager "build-tools;34.0.0" >/dev/null 2>&1
        fi
    fi
    msg_ok "Android SDK nain≈°talovan√©."
    
    # In≈°tal√°cia Gradle
    msg_info "In≈°talujem Gradle build system..."
    if [ ! -d "/opt/gradle" ]; then
        # Vyma≈æ star√© Gradle s√∫bory ak existuj√∫
        rm -rf /opt/gradle-8.13 2>/dev/null || true
        rm -f /tmp/gradle.zip 2>/dev/null || true
        
        wget -q https://services.gradle.org/distributions/gradle-8.13-bin.zip -O /tmp/gradle.zip
        cd /tmp
        unzip -q gradle.zip
        mv gradle-8.13 /opt/gradle
        rm -f gradle.zip
    else
        msg_info "Gradle u≈æ je nain≈°talovan√©, preskakujem..."
    fi
    export PATH=${PATH}:/opt/gradle/bin
    msg_ok "Gradle nain≈°talovan√©: $(gradle -v 2>/dev/null | head -n1 || echo 'Gradle ready')"
    
    # In≈°tal√°cia Cordova CLI
    msg_info "In≈°talujem Cordova CLI pre mobile app development..."
    if ! command -v cordova &> /dev/null; then
        npm install -g cordova &>/dev/null
    else
        msg_info "Cordova u≈æ je nain≈°talovan√©, preskakujem..."
    fi
    msg_ok "Cordova nain≈°talovan√©: $(cordova -v 2>/dev/null || echo 'Cordova ready')"
    
    # Vytvorenie environment setup file
    msg_info "Vytv√°ram environment setup s√∫bor..."
    cat << 'ENVEOF' > /etc/environment
ANDROID_HOME=/opt/android-sdk
ANDROID_SDK_ROOT=/opt/android-sdk
PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/android-sdk/cmdline-tools/latest/bin:/opt/android-sdk/platform-tools:/opt/gradle/bin"
JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
ENVEOF
    
    # Vytvorenie profile setup
    cat << 'PROFEOF' > /etc/profile.d/android-dev.sh
export ANDROID_HOME=/opt/android-sdk
export ANDROID_SDK_ROOT=/opt/android-sdk
export PATH=${PATH}:${ANDROID_HOME}/cmdline-tools/latest/bin:${ANDROID_HOME}/platform-tools:/opt/gradle/bin
export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
PROFEOF
    chmod +x /etc/profile.d/android-dev.sh
    msg_ok "Android development prostredie nastaven√©."
    
    # Vytvorenie adres√°rov
    msg_info "Vytv√°ram adres√°re aplik√°cie a pre d√°ta..."
    mkdir -p ${APP_DIR}
    mkdir -p ${DATA_DIR}/data/backups
    chown -R root:root ${APP_DIR}
    chown -R root:root ${DATA_DIR}
    msg_ok "Adres√°re s√∫ pripraven√©."

    # Klonovanie repozit√°ra
    msg_info "S≈•ahujem aplik√°ciu z ${REPO_URL}..."
    git clone ${REPO_URL} ${APP_DIR} >/dev/null 2>&1
    msg_ok "Aplik√°cia stiahnut√°."
    
    # Vytvorenie Cordova projektu pre Android APK
    msg_info "Vytv√°ram Cordova projekt pre Android APK..."
    if [ ! -d "/opt/mikrotik-manager-app" ]; then
        # Naƒç√≠ta≈• Android environment
        source /etc/profile.d/android-dev.sh 2>/dev/null || true
        export ANDROID_HOME=/opt/android-sdk
        export ANDROID_SDK_ROOT=/opt/android-sdk
        export PATH=${PATH}:${ANDROID_HOME}/cmdline-tools/latest/bin:${ANDROID_HOME}/platform-tools:/opt/gradle/bin
        export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
        
        cd /opt
        cordova create mikrotik-manager-app com.mikrotik.manager "MikroTik Manager" >/dev/null 2>&1
        cd mikrotik-manager-app
        cordova platform add android >/dev/null 2>&1
        cordova plugin add cordova-plugin-inappbrowser >/dev/null 2>&1
        
        # Kop√≠rovanie template index.html z repozit√°ra ak existuje
        if [ -f "/opt/mikrotik-manager/template/index.html" ]; then
            cp /opt/mikrotik-manager/template/index.html /opt/mikrotik-manager-app/www/ 2>/dev/null || true
        fi
    fi
    msg_ok "Cordova projekt vytvoren√Ω."
    
    # Kop√≠rovanie APK instructions template do /opt/
    if [ -f "/opt/mikrotik-manager/template/MIKROTIK_MANAGER_APK_INSTRUCTIONS.md" ]; then
        cp /opt/mikrotik-manager/template/MIKROTIK_MANAGER_APK_INSTRUCTIONS.md /opt/ 2>/dev/null || true
    fi
    
    # Stiahnutie Android APK z repozit√°ra
    msg_info "Pripravujem Android APK..."
    if [ ! -f "/opt/MikroTikManager.apk" ]; then
        if [ -f "${APP_DIR}/MikroTikManager.apk" ]; then
            cp ${APP_DIR}/MikroTikManager.apk /opt/MikroTikManager.apk
            rm -f ${APP_DIR}/MikroTikManager.apk
            msg_ok "APK skop√≠rovan√Ω z repozit√°ra: /opt/MikroTikManager.apk"
        else
            msg_warn "Pre-built APK nen√°jden√Ω v repozit√°ri. Na vytvorenie APK spusti manu√°lne: ./build-apk.sh"
        fi
    else
        msg_ok "APK u≈æ existuje: /opt/MikroTikManager.apk"
    fi
    
    # Vytvorenie Python Virtual Environment
    msg_info "Vytv√°ram izolovan√© Python prostredie (venv)..."
    python3 -m venv ${APP_DIR}/venv
    msg_ok "Virtual environment vytvoren√©."
    
    # In≈°tal√°cia Python kni≈æn√≠c
    msg_info "In≈°talujem potrebn√© Python kni≈ænice..."
    source ${APP_DIR}/venv/bin/activate
    pip install --quiet -r ${APP_DIR}/requirements.txt >/dev/null 2>&1
    deactivate
    msg_ok "Kni≈ænice nain≈°talovan√©."
    
    # Vytvorenie a nastavenie systemd slu≈æby
    msg_info "Vytv√°ram systemd slu≈æbu pre automatick√© sp√∫≈°≈•anie..."
    cat << EOF > ${SERVICE_FILE}
[Unit]
Description=MikroTik Backup Manager
After=network.target

[Service]
Type=simple
User=root
Group=root
WorkingDirectory=${APP_DIR}
ExecStart=/opt/mikrotik-manager/venv/bin/gunicorn --worker-class eventlet -w 1 --bind 0.0.0.0:5000 "app:app"
Restart=always
RestartSec=10
Environment="DATA_DIR=${DATA_DIR}/data"

[Install]
WantedBy=multi-user.target
EOF
    msg_ok "S√∫bor pre slu≈æbu vytvoren√Ω."
    
    # Povolenie a spustenie slu≈æby
    msg_info "Povoƒæujem a sp√∫≈°≈•am slu≈æbu MikroTik Backup Manager..."
    systemctl daemon-reload
    systemctl enable --now mikrotik-manager.service >/dev/null 2>&1
    msg_ok "Slu≈æba mikrotik-manager.service je akt√≠vna a be≈æ√≠."
    
    echo "üéâ In≈°tal√°cia dokonƒçen√°!"
    echo "üåê Web aplik√°cia je dostupn√° na: http://$(hostname -I | awk '{print $1}'):5000"
    echo "üìã Prv√© prihl√°senie: vytvorte si √∫ƒçet cez registraƒçn√Ω formul√°r"
    echo ""
    echo "üì± Android Development Tools nain≈°talovan√©:"
    echo "   ‚Ä¢ Node.js $(node -v 2>/dev/null || echo 'N/A')"
    echo "   ‚Ä¢ Java $(java -version 2>&1 | head -n1 | cut -d'"' -f2 2>/dev/null || echo 'N/A')"
    echo "   ‚Ä¢ Android SDK v35.0.0"
    echo "   ‚Ä¢ Gradle $(gradle -v 2>/dev/null | head -n1 | awk '{print $2}' || echo 'N/A')"
    echo "   ‚Ä¢ Cordova $(cordova -v 2>/dev/null || echo 'N/A')"
    echo ""
    echo "üõ†Ô∏è  APK Building:"
    echo "   cd /opt/mikrotik-manager-app && cordova build android"
    
fi

echo ""
echo "üìñ U≈æitoƒçn√© pr√≠kazy:"
echo "   Re≈°tart slu≈æby:    systemctl restart mikrotik-manager.service"
echo "   Stav slu≈æby:       systemctl status mikrotik-manager.service"  
echo "   Logy slu≈æby:       journalctl -u mikrotik-manager.service -f"
echo "   Manu√°lny update:   cd ${APP_DIR} && ./update.sh"
echo ""
echo "üì± Android APK Development:"
echo "   Build APK:         cd ${APP_DIR} && ./build-apk.sh"
echo "   Cordova projekt:   /opt/mikrotik-manager-app/"
echo "   Fin√°lny APK:       /opt/MikroTikManager.apk"
echo "   APK Instructions:  /opt/MIKROTIK_MANAGER_APK_INSTRUCTIONS.md"